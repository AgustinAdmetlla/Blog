* ALMACENAMIENTO DE IMAGENES:
    Primero se debe indicar donde se va a guardar la imagen.

  def user_directory_path(instance, filename):
      return 'blog/{0}/{1}'.format(instance.title, filename)

    Las imagnes se van a guardar en una carpeta llamda blog donde {0} hace 
referencia a la instancia de 'title' y {1} hace referencia al nombre de la
imagen.

  class Post(models.Model):
        title = models.CharField(max_length=250)
        thumbnail = models.ImageField(
            upload_to = user_directory_path, 
            default = 'blog/default.jpg'
        )

    thumbnail -> default es para cuando no se carga una imagen. En caso de no 
necesitar una imagen por default, se borra el parametro y se lo cambia por:
  blank = True

  class Post(models.Model):
        title = models.CharField(max_length=250)
        thumbnail = models.ImageField(
            upload_to = user_directory_path, 
            #default = 'blog/default.jpg'
            blank = True,
            null = True
        )
        excerpt = models.TextField(null=True)
        content = models.TextField()
        # slug es para agregar contenido
        slug = models.SlugField(
            max_length=250, 
            unique_for_date='published',
            null = False,
            unique = True
        )

    - slug -> es para agregar el contenido al post. 
    - slug(unique_for_date=xxx) -> hace referencia al modelo.
    - slug(null=Flase, unique=True) -> como se quiere que los slug siempre sean.
creados, se debe mantener esa configuracion para que sean unicos y diferentes
cada uno con su url.


* VINCULAR POST con USUARIOS:
    En el modulo 'models.py' de 'blog' agrego:

  from django.contrib.auth.models import User

  author = models.ForeignKey(
      User, 
      on_delete = models.CASCADE,
      related_name = 'post_user'
  )

    -- on_delete = models.CASCADE -> indica que cuando el usuario sea borrado 
se borren tambien los datos relacionados a Ã©l.

    - related_name = 'post_user' -> se le da un nombre al atributo para ser 
llamado cuando se trabajen las vistas.


* CONFIGURACION de VISUALIZACION(publico/privado), EDICION, etc:
    En la clase Post se debe agregar el atributo y la lista de opciones.
    
  options = [
      ('draft', 'Draft), -> solo el usuario podra ver su/sus post/s
      ('published', 'Published), -> publicaciones publicas
  ]

   
  class Post(models.Model):
      status = models.CharField(
          max_length = 10, 
          choices = options, 
          default = 'draft'
      )


* MANIPULACION de OBJETO SEGUN CONF. VISUALIZACION:
    En la clase Post se debe agregar el atributo y la lista de opciones.
Para hacer referencia a un objeto de una base de datos, se utiliza el atributo
'objects'. que hereda el funcionamiento desde una nueva clase interna de Post
'class PostObjects(models.Manager)'. 
    Dicha clase usara una funcion de 'queryset' que permite filtrar el 
'status' de 'published':

  class PostObjects(models.Manager):
      def get_wueryset(self):
          return super().get_queryset().filter(status='published)

  objects = models.Manager()
  postobjects = PostObjects()


* ORDENAMIENTO VISUAL de POSTs:
    Se debe crear una sub clase en la clase 'Post' llamada 'Meta'. Se ordena 
por primera creacion:

  class Meta:
      ordering = ('-published', )

* VISUALIZAR CORRECTAMENTE los POSTs en la BD:
    En la clase 'Post' se define el metodo:
  
  def __str__(self):
      return self.title


---- SE DEBEN CARGAR LOS MODELOS A DJANGO ----
python manage.py makemigration



* REGISTRAR MODELOS PARA SER USADOS POR USUARIOS:
    Dentro del directorio 'blog', se trabaja sobre el modulo 'admin':
  

* CREACION SUPERUSUARIO para CREAR POST:
    En la terminal se ejecuta el comando:
  python manage.py createsuperuser

    Para esta app se crea:
    - username: admin
    - email address: adim@email.com 
    - password: 12345677


* SERIALIZACION/TRANSFORMACION OBJETOS/INFORMACION en BD a FORMATO JSON:
    Dentro del directorio 'blog' se crea un nuevo modulo llamado 
'serializers.py'. Se debe importar tambien, el modelo a serializar:

  from rest_framework import serializers
  from .models import Post

    class PostSerializer(serializer.ModelSerializer):
         class Meta:
            model = Post
            fields = (
                'id',
                'title', 
                'thumbnail',
                'excerpt',
                'content',
                'published',
                'author',
                'status',
                'slug',
           )


* CREACION de VISTAS:
    Se creara una vista que liste todos los Posts, y otra vista para mostrar
los detalles de cada uno: 
    from rest_framework.views import APIView
    from rest_framework.response import Response
    from .models import Post
    from .serializers import PostSerializer


    class BlogListView(APIView):
        def get(self, request, *args, **kwargs):
            posts = Post.objects.all -> consulta para retornar Posts incluso si son privados
            posts = Post.postobjects.all() -> devuelve solo los Posts publicos o indicados en el metodo PostObjects

            serializer = Post(posts, many=True) -> many=True indica que seran muchos elementos

            return Response()

    class PostDetailView(APIView):

        def get(self, request, post_slug, *args, **kwargs):
            post = get_object_or_404(Post, slug=post_slug)
            serializer = PostSerializer(post)
            return Response(serializer.data)


* AGREGAR VISTAS URL:
    En el directorio de 'blog' se crea el modulo 'urls.py':
    from django.urls import path

    app_name = 'blog'
    urlpatterns = [ -> se crea la ruta hacia los modulos/vistas que pertenecen a 'blog'
        
    ]

    Una vez creado el modulo, se debe agregar el path de views de 'blog'
al urlpatterns de 'core'. esto se hace para indicarle a la aplicacion las rutas
de las distintas app que usamos.


#########################################################################
#                                                                       #
#                     IMPLEMENTACION FRONTEND VUE                       #
#                                                                       #
#########################################################################

    Para iniciar VUE hay que estar ubicados en el directorio que contiene a 
'backend' y ejecutar el comando:
  vue create frontend

    Luego se debe instalar 'tailwind' ubicandome en el directorio de 'frontend':
  vue add tailwind

   Siguiendo dentro del directorio 'frontend' ejecuto el comando que inicia el 
servidor npm:
  npm run serve

* CREACION NAVEGACION en VUE:
    Dentro del directorio de 'frontend/src/views' creo un modulo llamado 
'Blog.vue'. Una vez creado el modulo, debo agregar la ruta de la imagen al 
modulo 'index' ubicado en el directorio 'router' de 'frontend/src'.
    Se debe modicar 'const routes'

- 'Blog.vue':
    <template>
    <div>
        <h1>This is a Blog view</h1>
    </div>
    </template>

- 'index.js':
    const routes = [
        {
            path: '/',
            name: 'home',
            component: HomeView
        },
        {
            path: '/about',
            name: 'about',
            component: () => import(/* webpackChunkName: "about" */ '../views/AboutView.vue')
        },
        {
            path: '/blog',
            name: 'Blog',
            component: () => import(/* webpackChunkName: "about" */ '../views/Blog.vue')
        }
    ]

    Creado y agregado la vista, hay que poder acceder a ella. Para eso se debe
modificar el modulo 'App.vue' de 'frontend/src' y agregar un 'router link'
que es similar a agregar 'blog' al path de 'core'.

- 'App.vue':
    <template>
    <nav>
        <router-link to="/">Home</router-link> |
        <router-link to="/about">About</router-link> |
        <router-link to="/blog">Blog</router-link>
    </nav>
    <router-view />
    </template>

* AGREGAR VISTAS para los POSTS:
    Se trabaja con css en el modulo 'Blog.vue'.

* COMUNICACION VUE y DJANGO:
    Se utiliza vue-axios, el comando a ejecutar debe ser dentro del directorio 'frontend':
npm i vue-axios

* EJECUTAR AXIOS: 
    En 'core/settings.py' se debe haber creado el vinculo con 'corsheader' en 
'INSTALLED_APPS'
    Se debe crear un nuevo archivo dentro de 'frontend/src' con el nombre de:
'axios-api.js':

- 'axios-api.js':
    import axios from 'axios'

    const getAPI = axios.create(
        {
            baseURL: 'http.//127.0.0.1:8000',
            timeout: 1000,
        }
    )

    export { getAPI }

    Dentro de 'Blog.vue' se debe dar forma a 'APIData'. Debajo de todo agrega:
<script>
import { getAPI } from '../axios-api'

export default {
  name: 'Blog',
  data() {
    return {
      APIData: []
    }
  },
  created() {
    getAPI.get('blog/posts/',) -> se indica la url o endpoint de donde se van a extraer los datos
      .then(response => {
        console.log('Post API has received data')
        this.APIData = response.data
      })
      .catch(err => {
        console.log(err)
      })
  }
}
</script>








